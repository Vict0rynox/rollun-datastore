# image: docker
# services:
# - docker:dind
image: php:7.1

cache:
  paths:
    - vendor/
variables:
  DB_DRIVER: Pdo_Mysql
  DB_USER: utest
  DB_PASS: qwe123321q
  DB_HOST: 127.0.0.1
  DB_PORT: 3306
  APP_ENV: test
  TEST_HOST: 'http://localhost:9000/'


before_script:
  # update packages
  - apt-get update -yqq
  # install git
  - apt-get install git -yqq
  - apt-get install zlib1g-dev -yqq
  # install php-json ext
  - docker-php-ext-install json
  - docker-php-ext-install zip
  - docker-php-ext-install mysqli
  - docker-php-ext-install pdo_mysql
  # install composer
  - curl -sS https://getcomposer.org/installer | php
  # install dependencies
  - php composer.phar install

stages:
  - build
  - test
  - analyse
  - deploy

phpunit-unit:
  stage: test
  script: vendor/bin/phpunit --configuration phpunit.xml --testsuite unit

phpunit-functional:
  variables:
    DB_NAME: functional
  services:
    - mysql:latest
  stage: test
  script:
    - apt-get update
    - apt-get install -y mysql-server mysql-client
    - service mysql start
    - mysql -u root -e "CREATE USER $DB_USER@localhost IDENTIFIED BY '$DB_PASS';CREATE DATABASE IF NOT EXISTS $DB_NAME;GRANT ALL PRIVILEGES ON $DB_NAME.* TO $DB_USER@localhost;"
    - vendor/bin/phpunit --configuration phpunit.xml --testsuite functional

phpunit-intagration:
  variables:
    DB_NAME: intagration
  services:
    - mysql:latest
  stage: test
  script:
    - apt-get update
    - apt-get install -y mysql-server mysql-client
    - service mysql start
    - mysql -u root -e "CREATE USER $DB_USER@localhost IDENTIFIED BY '$DB_PASS';CREATE DATABASE IF NOT EXISTS $DB_NAME;GRANT ALL PRIVILEGES ON $DB_NAME.* TO $DB_USER@localhost;"
    - php -S localhost:9000 -t public public/test.php &
    - vendor/bin/phpunit --configuration phpunit.xml --testsuite intagration

phpcs:
  stage: analyse
  script: vendor/bin/phpcs src

mkdocs:build:
  image: python:2.7
  before_script:
    - curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
    - python get-pip.py
    - pip install mkdocs
  stage: build
  script: mkdocs build
  artifacts:
    expire_in: 3 hour
    paths:
      - site
  only:
    - tags
  except:
    - /^(?!master).+@/

mkdocs:deploy:
  stage: deploy
  variables:
    GITPAGES: rollun-com.github.io/rollun-datastore/
    GITHUB_REPO: git@github.com:rollun-com/rollun-datastore.git
  image: debian
  before_script:
    - apt-get update
    - apt-get install git -y
    - 'which ssh-agent || (apt-get install openssh -y )'
    - eval $(ssh-agent -s)
    - ssh-add <(echo "$GIT_SSH_PRIVAT_KEY")
    - git config --global user.email $GIT_EMAIL
    - git config --global user.name $GIT_NAME
    - mkdir -p ~/.ssh
    - ssh-keyscan -H -t rsa github.com  >> ~/.ssh/known_hosts
  script:
    - cd site
    - git init
    - git remote add origin git@github.com:victorynox/rollun-datahandler.git
    - git fetch
    - git checkout -b gh-pages
    - git add *
    - git commit -m "build docs $CI_COMMIT_TAG"
    - git push --force origin gh-pages
  environment:
    name: github-pages
    url: https://$GITPAGES
  dependencies:
    - mkdocs:build
  only:
    - tags
  except:
    - /^(?!master).+@/
